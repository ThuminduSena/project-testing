name: Push-to-Branch SAST Checkpoint

on:
  push:
    branches:
      - main
      - dev
      - feature/*
  # Optional: Allow manual trigger
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  sast-scan:
    name: Static Code Analysis (Push-to-Branch)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Optional cache step to speed up repeated scans
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt || true
          pip install semgrep

      # üîç CodeQL initialization
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
          queries: security-extended

      # üß† Run CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "push-to-branch-sast"

      # ‚ö° Run Semgrep scan for fast static checks
      - name: Run Semgrep SAST scan
        run: semgrep --config auto --error --json --output semgrep-report.json || echo "Semgrep found issues"

      # ‚úÖ Upload results to GitHub Security tab
      - name: Upload SARIF results (CodeQL + Semgrep)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-report.json

      # Optional: Fail the pipeline if critical issues are found
      - name: Enforce Security Threshold
        if: always()
        run: |
          CRITICAL_COUNT=$(grep -o '"severity": *"ERROR"' semgrep-report.json | wc -l)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Critical SAST findings detected ($CRITICAL_COUNT). Failing build."
            exit 1
          else
            echo "‚úÖ No critical SAST issues found."
          fi
