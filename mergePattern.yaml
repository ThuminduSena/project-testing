name: PR SAST Pipeline

on:
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install semgrep

  pr-sast:
    name: PR Static Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # üîç Run Semgrep for SAST on PR
      - name: Run Semgrep SAST Scan
        run: semgrep --config auto --error --json --output semgrep-pr-report.json || echo "Semgrep found issues"

      # ‚úÖ Upload SARIF results to GitHub Security tab
      - name: Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-pr-report.json

      # Optional: fail if critical issues found
      - name: Enforce Security Threshold
        if: always()
        run: |
          CRITICAL_COUNT=$(grep -o '"severity": *"ERROR"' semgrep-pr-report.json | wc -l)
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Critical SAST findings detected ($CRITICAL_COUNT). Failing build."
            exit 1
          else
            echo "‚úÖ No critical SAST issues found."

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Tests
        run: pytest tests/ --maxfail=2 --disable-warnings -q || true

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup, pr-sast, test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy
        run: echo "Deploy scripts go here"
